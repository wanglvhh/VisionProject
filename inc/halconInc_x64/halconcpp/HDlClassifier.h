/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 17.12
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HDLCLASSIFIER
#define HCPP_HDLCLASSIFIER

namespace HalconCpp
{

// Represents an instance of a Deep Neural Network.
class LIntExport HDlClassifier : public HToolBase
{

public:

  // Create an uninitialized instance
  HDlClassifier():HToolBase() {}

  // Copy constructor
  HDlClassifier(const HDlClassifier& source) : HToolBase(source) {}

  // Create HDlClassifier from handle, taking ownership
  explicit HDlClassifier(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);

  // Deep copy of all data represented by this object instance
  HDlClassifier Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_dl_classifier: Read a deep-learning-based classifier from a file.
  explicit HDlClassifier(const HString& FileName);

  // read_dl_classifier: Read a deep-learning-based classifier from a file.
  explicit HDlClassifier(const char* FileName);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Infer the class affiliations for a set of images using the  deep-learning-based classifier.
  HDlClassifierResult ApplyDlClassifier(const HImage& Images) const;

  // Deserialize a deep-learning-based classifier.
  void DeserializeDlClassifier(const HSerializedItem& SerializedItemHandle);

  // Return the parameters the deep-learning-based classifier.
  HTuple GetDlClassifierParam(const HTuple& GenParamName) const;

  // Return the parameters the deep-learning-based classifier.
  HTuple GetDlClassifierParam(const HString& GenParamName) const;

  // Return the parameters the deep-learning-based classifier.
  HTuple GetDlClassifierParam(const char* GenParamName) const;

  // Read a deep-learning-based classifier from a file.
  void ReadDlClassifier(const HString& FileName);

  // Read a deep-learning-based classifier from a file.
  void ReadDlClassifier(const char* FileName);

  // Serialize a deep-learning-based classifier.
  HSerializedItem SerializeDlClassifier() const;

  // Set the parameters of the deep-learning-based classifier.
  void SetDlClassifierParam(const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Set the parameters of the deep-learning-based classifier.
  void SetDlClassifierParam(const HString& GenParamName, const HString& GenParamValue) const;

  // Set the parameters of the deep-learning-based classifier.
  void SetDlClassifierParam(const char* GenParamName, const char* GenParamValue) const;

  // Write a deep-learning-based classifier in a file.
  void WriteDlClassifier(const HString& FileName) const;

  // Write a deep-learning-based classifier in a file.
  void WriteDlClassifier(const char* FileName) const;

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HToolArrayRef;

typedef HToolArrayRef<HDlClassifier> HDlClassifierArrayRef;
typedef HSmartPtr< HDlClassifierArrayRef > HDlClassifierArrayPtr;


// Represents multiple tool instances
class LIntExport HDlClassifierArray : public HToolArray
{

public:

  // Create empty array
  HDlClassifierArray();

  // Create array from native array of tool instances
  HDlClassifierArray(HDlClassifier* classes, Hlong length);

  // Copy constructor
  HDlClassifierArray(const HDlClassifierArray &tool_array);

  // Destructor
  virtual ~HDlClassifierArray();

  // Assignment operator
  HDlClassifierArray &operator=(const HDlClassifierArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HDlClassifier* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HDlClassifierArrayPtr *mArrayPtr;
};

}

#endif
