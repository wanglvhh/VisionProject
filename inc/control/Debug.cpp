// ====================================================================
// Debug.cpp
// ====================================================================

// ====================================================================
// Les Includes
// ====================================================================

#include "stdafx.h"
#include <stdio.h>
#include <CommCtrl.h>
#include <math.h>
#include "Debug.h"

#ifdef _AFXDLL
#include <afxpriv.h>
#endif

// ====================================================================
// Les Defines
// ====================================================================

#define STRING_CASE(val)       case val : pcsz = #val; break;

// ====================================================================
// Les Fonctions
// ====================================================================

void DisplayRect(LPCTSTR lpszText, RECT &stRect)
 {
  TRACE("%s : [(%d,%d) ; (%d,%d)] : W = %d , H = %d\n", lpszText,
                                                        stRect.left,
                                                        stRect.top,
                                                        stRect.right,
                                                        stRect.bottom,
                                                        stRect.right - stRect.left,
                                                        stRect.bottom - stRect.top);
 } 

// --------------------------------------------------------------------

char *GetBinaryString(short sValue, char *szBuf)
 {
  static char st_szGetBinaryString[50];
  char        szTemp[50];

  memset(szTemp, 0, sizeof(szTemp));

  for (int I=0; I<sizeof(short) * 8; I++)
   {
    BOOL bBit = (sValue & (short)pow(2.0,I)) ? TRUE : FALSE;

    if (bBit) szTemp[I] = '1';
    else szTemp[I] = '0';
   }

  strrev(szTemp);

  if (szBuf == NULL)
   {
    strcpy(st_szGetBinaryString, szTemp);
    return st_szGetBinaryString;
   }

  strcpy(szBuf, szTemp);

  return szBuf;
 }

// --------------------------------------------------------------------

BOOL GetBit(int nBit, LPARAM lParam)
 {
  return (lParam & (long)pow(2.0,nBit)) ? TRUE : FALSE;
 }

// --------------------------------------------------------------------

LPCTSTR GetNotificationString(UINT uiCode)
 {
	LPCTSTR pcsz;
	static TCHAR _szHRESULT_GetListCtrlNotificationString[] = _T("0x12345678");

	switch (uiCode)
		{
     STRING_CASE(NM_CHAR);
     STRING_CASE(NM_CLICK);
     STRING_CASE(NM_CUSTOMDRAW);
     STRING_CASE(NM_DBLCLK);
     //STRING_CASE(NM_ENDWAIT);
     STRING_CASE(NM_HOVER);
     STRING_CASE(NM_KEYDOWN);
     STRING_CASE(NM_KILLFOCUS);
     STRING_CASE(NM_NCHITTEST);
     STRING_CASE(NM_OUTOFMEMORY);
     STRING_CASE(NM_RCLICK);
     STRING_CASE(NM_RDBLCLK);
     STRING_CASE(NM_RELEASEDCAPTURE);
     STRING_CASE(NM_RETURN);
     STRING_CASE(NM_SETCURSOR);
     STRING_CASE(NM_SETFOCUS);
     //STRING_CASE(NM_STARTWAIT);
     //STRING_CASE(NM_TOOLTIPSCREATED);

     STRING_CASE(LVN_BEGINDRAG);
     STRING_CASE(LVN_BEGINLABELEDIT);
     STRING_CASE(LVN_BEGINRDRAG);
     STRING_CASE(LVN_COLUMNCLICK);
     STRING_CASE(LVN_DELETEALLITEMS);
     STRING_CASE(LVN_DELETEITEM);
     STRING_CASE(LVN_ENDLABELEDIT);
     STRING_CASE(LVN_GETDISPINFO);
     STRING_CASE(LVN_GETINFOTIP);
     STRING_CASE(LVN_HOTTRACK);
     STRING_CASE(LVN_INSERTITEM);
     STRING_CASE(LVN_ITEMACTIVATE);
     STRING_CASE(LVN_ITEMCHANGED);
     STRING_CASE(LVN_ITEMCHANGING);
     STRING_CASE(LVN_KEYDOWN);
     STRING_CASE(LVN_MARQUEEBEGIN);
     STRING_CASE(LVN_ODCACHEHINT);
     STRING_CASE(LVN_ODFINDITEM);
     STRING_CASE(LVN_ODSTATECHANGED);
     STRING_CASE(LVN_SETDISPINFO);

     STRING_CASE(HDN_BEGINDRAG);
     STRING_CASE(HDN_BEGINTRACK);
     STRING_CASE(HDN_DIVIDERDBLCLICK);
     STRING_CASE(HDN_ENDDRAG);
     STRING_CASE(HDN_ENDTRACK);
     STRING_CASE(HDN_GETDISPINFO);
     STRING_CASE(HDN_ITEMCHANGED);
     STRING_CASE(HDN_ITEMCHANGING);
     STRING_CASE(HDN_ITEMCLICK);
     STRING_CASE(HDN_ITEMDBLCLICK);
     STRING_CASE(HDN_TRACK);
     STRING_CASE(HDN_ITEMCHANGINGW);

     default :
               wsprintf(_szHRESULT_GetListCtrlNotificationString, TEXT("%#lx"), uiCode);
               pcsz = _szHRESULT_GetListCtrlNotificationString;
               break;
    }

  return pcsz;
 }

// --------------------------------------------------------------------

LPCTSTR GetMessageString(DWORD dwMessage)
 {
	LPCTSTR pcsz;
	static TCHAR _szHRESULT_GetMessageString[] = "0x12345678";

	switch (dwMessage)
		{
     // Windows messages
     STRING_CASE(WM_NULL);
     STRING_CASE(WM_CREATE);
     STRING_CASE(WM_DESTROY);
     STRING_CASE(WM_MOVE);
     STRING_CASE(WM_SIZE);
     STRING_CASE(WM_ACTIVATE);
     STRING_CASE(WM_SETFOCUS);
     STRING_CASE(WM_KILLFOCUS);
     STRING_CASE(WM_ENABLE);
     STRING_CASE(WM_SETREDRAW);
     STRING_CASE(WM_SETTEXT);
     STRING_CASE(WM_GETTEXT);
     STRING_CASE(WM_GETTEXTLENGTH);
     STRING_CASE(WM_PAINT);
     STRING_CASE(WM_CLOSE);
     STRING_CASE(WM_QUERYENDSESSION);
     STRING_CASE(WM_QUIT);
     STRING_CASE(WM_QUERYOPEN);
     STRING_CASE(WM_ERASEBKGND);
     STRING_CASE(WM_SYSCOLORCHANGE);
     STRING_CASE(WM_ENDSESSION);
     STRING_CASE(WM_SHOWWINDOW);
     //STRING_CASE(WM_WININICHANGE);
     STRING_CASE(WM_SETTINGCHANGE);
     STRING_CASE(WM_DEVMODECHANGE);
     STRING_CASE(WM_ACTIVATEAPP);
     STRING_CASE(WM_FONTCHANGE);
     STRING_CASE(WM_TIMECHANGE);
     STRING_CASE(WM_CANCELMODE);
     STRING_CASE(WM_SETCURSOR);
     STRING_CASE(WM_MOUSEACTIVATE);
     STRING_CASE(WM_CHILDACTIVATE);
     STRING_CASE(WM_QUEUESYNC);
     STRING_CASE(WM_GETMINMAXINFO);
     STRING_CASE(WM_PAINTICON);
     STRING_CASE(WM_ICONERASEBKGND);
     STRING_CASE(WM_NEXTDLGCTL);
     STRING_CASE(WM_SPOOLERSTATUS);
     STRING_CASE(WM_DRAWITEM);
     STRING_CASE(WM_MEASUREITEM);
     STRING_CASE(WM_DELETEITEM);
     STRING_CASE(WM_VKEYTOITEM);
     STRING_CASE(WM_CHARTOITEM);
     STRING_CASE(WM_SETFONT);
     STRING_CASE(WM_GETFONT);
     STRING_CASE(WM_SETHOTKEY);
     STRING_CASE(WM_GETHOTKEY);
     STRING_CASE(WM_QUERYDRAGICON);
     STRING_CASE(WM_COMPAREITEM);
     STRING_CASE(WM_COMPACTING);
     STRING_CASE(WM_COMMNOTIFY);
     STRING_CASE(WM_WINDOWPOSCHANGING);
     STRING_CASE(WM_WINDOWPOSCHANGED);
     STRING_CASE(WM_POWER);
     STRING_CASE(WM_COPYDATA);
     STRING_CASE(WM_CANCELJOURNAL);
     STRING_CASE(WM_NOTIFY);
     STRING_CASE(WM_INPUTLANGCHANGEREQUEST);
     STRING_CASE(WM_INPUTLANGCHANGE);
     STRING_CASE(WM_TCARD);
     STRING_CASE(WM_HELP);
     STRING_CASE(WM_USERCHANGED);
     STRING_CASE(WM_NOTIFYFORMAT);
     STRING_CASE(WM_CONTEXTMENU);
     STRING_CASE(WM_STYLECHANGING);
     STRING_CASE(WM_STYLECHANGED);
     STRING_CASE(WM_DISPLAYCHANGE);
     STRING_CASE(WM_GETICON);
     STRING_CASE(WM_SETICON);
     STRING_CASE(WM_NCCREATE);
     STRING_CASE(WM_NCDESTROY);
     STRING_CASE(WM_NCCALCSIZE);
     STRING_CASE(WM_NCHITTEST);
     STRING_CASE(WM_NCPAINT);
     STRING_CASE(WM_NCACTIVATE);
     STRING_CASE(WM_GETDLGCODE);
     STRING_CASE(WM_NCMOUSEMOVE);
     STRING_CASE(WM_NCLBUTTONDOWN);
     STRING_CASE(WM_NCLBUTTONUP);
     STRING_CASE(WM_NCLBUTTONDBLCLK);
     STRING_CASE(WM_NCMBUTTONDOWN);
     STRING_CASE(WM_NCMBUTTONUP);
     STRING_CASE(WM_NCMBUTTONDBLCLK);
     STRING_CASE(WM_NCRBUTTONDOWN);
     STRING_CASE(WM_NCRBUTTONUP);
     STRING_CASE(WM_NCRBUTTONDBLCLK);
     //STRING_CASE(WM_KEYFIRST);
     STRING_CASE(WM_KEYDOWN);
     STRING_CASE(WM_KEYUP);
     STRING_CASE(WM_CHAR);
     STRING_CASE(WM_DEADCHAR);
     STRING_CASE(WM_SYSKEYDOWN);
     STRING_CASE(WM_SYSKEYUP);
     STRING_CASE(WM_SYSCHAR);
     STRING_CASE(WM_SYSDEADCHAR);
     STRING_CASE(WM_KEYLAST);
     STRING_CASE(WM_IME_STARTCOMPOSITION);
     STRING_CASE(WM_IME_ENDCOMPOSITION);
     STRING_CASE(WM_IME_COMPOSITION);
     //STRING_CASE(WM_IME_KEYLAST);
     STRING_CASE(WM_INITDIALOG);
     STRING_CASE(WM_COMMAND);
     STRING_CASE(WM_SYSCOMMAND);
     STRING_CASE(WM_TIMER);
     STRING_CASE(WM_HSCROLL);
     STRING_CASE(WM_VSCROLL);
     STRING_CASE(WM_INITMENU);
     STRING_CASE(WM_INITMENUPOPUP);
     STRING_CASE(WM_MENUSELECT);
     STRING_CASE(WM_MENUCHAR);
     STRING_CASE(WM_ENTERIDLE);
     STRING_CASE(WM_CTLCOLORMSGBOX);
     STRING_CASE(WM_CTLCOLOREDIT);
     STRING_CASE(WM_CTLCOLORLISTBOX);
     STRING_CASE(WM_CTLCOLORBTN);
     STRING_CASE(WM_CTLCOLORDLG);
     STRING_CASE(WM_CTLCOLORSCROLLBAR);
     STRING_CASE(WM_CTLCOLORSTATIC);
     //STRING_CASE(WM_MOUSEFIRST);
     STRING_CASE(WM_MOUSEMOVE);
     STRING_CASE(WM_LBUTTONDOWN);
     STRING_CASE(WM_LBUTTONUP);
     STRING_CASE(WM_LBUTTONDBLCLK);
     STRING_CASE(WM_RBUTTONDOWN);
     STRING_CASE(WM_RBUTTONUP);
     STRING_CASE(WM_RBUTTONDBLCLK);
     STRING_CASE(WM_MBUTTONDOWN);
     STRING_CASE(WM_MBUTTONUP);
     STRING_CASE(WM_MBUTTONDBLCLK);
     //STRING_CASE(WM_MOUSEWHEEL);
     //STRING_CASE(WM_MOUSELAST);
     STRING_CASE(WM_PARENTNOTIFY);
     STRING_CASE(WM_ENTERMENULOOP);
     STRING_CASE(WM_EXITMENULOOP);
     STRING_CASE(WM_NEXTMENU);
     STRING_CASE(WM_SIZING);
     STRING_CASE(WM_CAPTURECHANGED);
     STRING_CASE(WM_MOVING);
     STRING_CASE(WM_POWERBROADCAST);
     STRING_CASE(WM_DEVICECHANGE);
     STRING_CASE(WM_IME_SETCONTEXT);
     STRING_CASE(WM_IME_NOTIFY);
     STRING_CASE(WM_IME_CONTROL);
     STRING_CASE(WM_IME_COMPOSITIONFULL);
     STRING_CASE(WM_IME_SELECT);
     STRING_CASE(WM_IME_CHAR);
     STRING_CASE(WM_IME_KEYDOWN);
     STRING_CASE(WM_IME_KEYUP);
     STRING_CASE(WM_MDICREATE);
     STRING_CASE(WM_MDIDESTROY);
     STRING_CASE(WM_MDIACTIVATE);
     STRING_CASE(WM_MDIRESTORE);
     STRING_CASE(WM_MDINEXT);
     STRING_CASE(WM_MDIMAXIMIZE);
     STRING_CASE(WM_MDITILE);
     STRING_CASE(WM_MDICASCADE);
     STRING_CASE(WM_MDIICONARRANGE);
     STRING_CASE(WM_MDIGETACTIVE);
     STRING_CASE(WM_MDISETMENU);
     STRING_CASE(WM_ENTERSIZEMOVE);
     STRING_CASE(WM_EXITSIZEMOVE);
     STRING_CASE(WM_DROPFILES);
     STRING_CASE(WM_MDIREFRESHMENU);
     //STRING_CASE(WM_MOUSEHOVER);
     //STRING_CASE(WM_MOUSELEAVE);
     STRING_CASE(WM_CUT);
     STRING_CASE(WM_COPY);
     STRING_CASE(WM_PASTE);
     STRING_CASE(WM_CLEAR);
     STRING_CASE(WM_UNDO);
     STRING_CASE(WM_RENDERFORMAT);
     STRING_CASE(WM_RENDERALLFORMATS);
     STRING_CASE(WM_DESTROYCLIPBOARD);
     STRING_CASE(WM_DRAWCLIPBOARD);
     STRING_CASE(WM_PAINTCLIPBOARD);
     STRING_CASE(WM_VSCROLLCLIPBOARD);
     STRING_CASE(WM_SIZECLIPBOARD);
     STRING_CASE(WM_ASKCBFORMATNAME);
     STRING_CASE(WM_CHANGECBCHAIN);
     STRING_CASE(WM_HSCROLLCLIPBOARD);
     STRING_CASE(WM_QUERYNEWPALETTE);
     STRING_CASE(WM_PALETTEISCHANGING);
     STRING_CASE(WM_PALETTECHANGED);
     STRING_CASE(WM_HOTKEY);
     STRING_CASE(WM_PRINT);
     STRING_CASE(WM_PRINTCLIENT);
     STRING_CASE(WM_HANDHELDFIRST);
     STRING_CASE(WM_HANDHELDLAST);
     STRING_CASE(WM_AFXFIRST);
     STRING_CASE(WM_AFXLAST);
     STRING_CASE(WM_PENWINFIRST);
     STRING_CASE(WM_PENWINLAST);
     STRING_CASE(WM_APP);
     STRING_CASE(WM_USER);

     // Afx messages
     #ifdef _AFXDLL
     //STRING_CASE(WM_QUERYAFXWNDPROC);
     STRING_CASE(WM_SIZEPARENT);
     STRING_CASE(WM_SETMESSAGESTRING);
     STRING_CASE(WM_IDLEUPDATECMDUI);
     STRING_CASE(WM_INITIALUPDATE);
     STRING_CASE(WM_COMMANDHELP);
     STRING_CASE(WM_HELPHITTEST);
     STRING_CASE(WM_EXITHELPMODE);
     STRING_CASE(WM_RECALCPARENT);
     STRING_CASE(WM_SIZECHILD);
     STRING_CASE(WM_KICKIDLE);
     STRING_CASE(WM_QUERYCENTERWND);
     STRING_CASE(WM_DISABLEMODAL);
     STRING_CASE(WM_FLOATSTATUS);
     STRING_CASE(WM_ACTIVATETOPLEVEL);
    // STRING_CASE(WM_QUERY3DCONTROLS);
     STRING_CASE(WM_RESERVED_0370);
     STRING_CASE(WM_RESERVED_0371);
     STRING_CASE(WM_RESERVED_0372);
     STRING_CASE(WM_SOCKET_NOTIFY);
     STRING_CASE(WM_SOCKET_DEAD);
     STRING_CASE(WM_POPMESSAGESTRING);
     STRING_CASE(WM_OCC_LOADFROMSTREAM);
     STRING_CASE(WM_OCC_LOADFROMSTORAGE);
     STRING_CASE(WM_OCC_INITNEW);
     STRING_CASE(WM_OCC_LOADFROMSTREAM_EX);
     STRING_CASE(WM_OCC_LOADFROMSTORAGE_EX);
     STRING_CASE(WM_QUEUE_SENTINEL);
    // STRING_CASE(WM_RESERVED_037C);
     STRING_CASE(WM_RESERVED_037D);
     STRING_CASE(WM_RESERVED_037E);
     //STRING_CASE(WM_RESERVED_037F);
     #endif

     // Edit messages
     STRING_CASE(EM_GETSEL);
     STRING_CASE(EM_SETSEL);
     STRING_CASE(EM_GETRECT);
     STRING_CASE(EM_SETRECT);
     STRING_CASE(EM_SETRECTNP);
     STRING_CASE(EM_SCROLL);
     STRING_CASE(EM_LINESCROLL);
     STRING_CASE(EM_SCROLLCARET);
     STRING_CASE(EM_GETMODIFY);
     STRING_CASE(EM_SETMODIFY);
     STRING_CASE(EM_GETLINECOUNT);
     STRING_CASE(EM_LINEINDEX);
     STRING_CASE(EM_SETHANDLE);
     STRING_CASE(EM_GETHANDLE);
     STRING_CASE(EM_GETTHUMB);
     STRING_CASE(EM_LINELENGTH);
     STRING_CASE(EM_REPLACESEL);
     STRING_CASE(EM_GETLINE);
     //STRING_CASE(EM_LIMITTEXT);
     STRING_CASE(EM_CANUNDO);
     STRING_CASE(EM_UNDO);
     STRING_CASE(EM_FMTLINES);
     STRING_CASE(EM_LINEFROMCHAR);
     STRING_CASE(EM_SETTABSTOPS);
     STRING_CASE(EM_SETPASSWORDCHAR);
     STRING_CASE(EM_EMPTYUNDOBUFFER);
     STRING_CASE(EM_GETFIRSTVISIBLELINE);
     STRING_CASE(EM_SETREADONLY);
     STRING_CASE(EM_SETWORDBREAKPROC);
     STRING_CASE(EM_GETWORDBREAKPROC);
     STRING_CASE(EM_GETPASSWORDCHAR);
     STRING_CASE(EM_SETMARGINS);
     STRING_CASE(EM_GETMARGINS);
     STRING_CASE(EM_SETLIMITTEXT);
     STRING_CASE(EM_GETLIMITTEXT);
     STRING_CASE(EM_POSFROMCHAR);
     STRING_CASE(EM_CHARFROMPOS);

     // Button messages
     STRING_CASE(BM_GETCHECK);
     STRING_CASE(BM_SETCHECK);
     STRING_CASE(BM_GETSTATE);
     STRING_CASE(BM_SETSTATE);
     STRING_CASE(BM_SETSTYLE);
     STRING_CASE(BM_CLICK);
     STRING_CASE(BM_GETIMAGE);
     STRING_CASE(BM_SETIMAGE);

     // Static messages
     STRING_CASE(STM_SETICON);
     STRING_CASE(STM_GETICON);
     STRING_CASE(STM_SETIMAGE);
     STRING_CASE(STM_GETIMAGE);
     STRING_CASE(STM_MSGMAX);

     // List box messages
     STRING_CASE(LB_ADDSTRING);
     STRING_CASE(LB_INSERTSTRING);
     STRING_CASE(LB_DELETESTRING);
     STRING_CASE(LB_SELITEMRANGEEX);
     STRING_CASE(LB_RESETCONTENT);
     STRING_CASE(LB_SETSEL);
     STRING_CASE(LB_SETCURSEL);
     STRING_CASE(LB_GETSEL);
     STRING_CASE(LB_GETCURSEL);
     STRING_CASE(LB_GETTEXT);
     STRING_CASE(LB_GETTEXTLEN);
     STRING_CASE(LB_GETCOUNT);
     STRING_CASE(LB_SELECTSTRING);
     STRING_CASE(LB_DIR);
     STRING_CASE(LB_GETTOPINDEX);
     STRING_CASE(LB_FINDSTRING);
     STRING_CASE(LB_GETSELCOUNT);
     STRING_CASE(LB_GETSELITEMS);
     STRING_CASE(LB_SETTABSTOPS);
     STRING_CASE(LB_GETHORIZONTALEXTENT);
     STRING_CASE(LB_SETHORIZONTALEXTENT);
     STRING_CASE(LB_SETCOLUMNWIDTH);
     STRING_CASE(LB_ADDFILE);
     STRING_CASE(LB_SETTOPINDEX);
     STRING_CASE(LB_GETITEMRECT);
     STRING_CASE(LB_GETITEMDATA);
     STRING_CASE(LB_SETITEMDATA);
     STRING_CASE(LB_SELITEMRANGE);
     STRING_CASE(LB_SETANCHORINDEX);
     STRING_CASE(LB_GETANCHORINDEX);
     STRING_CASE(LB_SETCARETINDEX);
     STRING_CASE(LB_GETCARETINDEX);
     STRING_CASE(LB_SETITEMHEIGHT);
     STRING_CASE(LB_GETITEMHEIGHT);
     STRING_CASE(LB_FINDSTRINGEXACT);
     STRING_CASE(LB_SETLOCALE);
     STRING_CASE(LB_GETLOCALE);
     STRING_CASE(LB_SETCOUNT);
     STRING_CASE(LB_INITSTORAGE);
     STRING_CASE(LB_ITEMFROMPOINT);
     STRING_CASE(LB_MSGMAX);

     // Combo box messages
     STRING_CASE(CB_GETEDITSEL);
     STRING_CASE(CB_LIMITTEXT);
     STRING_CASE(CB_SETEDITSEL);
     STRING_CASE(CB_ADDSTRING);
     STRING_CASE(CB_DELETESTRING);
     STRING_CASE(CB_DIR);
     STRING_CASE(CB_GETCOUNT);
     STRING_CASE(CB_GETCURSEL);
     STRING_CASE(CB_GETLBTEXT);
     STRING_CASE(CB_GETLBTEXTLEN);
     STRING_CASE(CB_INSERTSTRING);
     STRING_CASE(CB_RESETCONTENT);
     STRING_CASE(CB_FINDSTRING);
     STRING_CASE(CB_SELECTSTRING);
     STRING_CASE(CB_SETCURSEL);
     STRING_CASE(CB_SHOWDROPDOWN);
     STRING_CASE(CB_GETITEMDATA);
     STRING_CASE(CB_SETITEMDATA);
     STRING_CASE(CB_GETDROPPEDCONTROLRECT);
     STRING_CASE(CB_SETITEMHEIGHT);
     STRING_CASE(CB_GETITEMHEIGHT);
     STRING_CASE(CB_SETEXTENDEDUI);
     STRING_CASE(CB_GETEXTENDEDUI);
     STRING_CASE(CB_GETDROPPEDSTATE);
     STRING_CASE(CB_FINDSTRINGEXACT);
     STRING_CASE(CB_SETLOCALE);
     STRING_CASE(CB_GETLOCALE);
     STRING_CASE(CB_GETTOPINDEX);
     STRING_CASE(CB_SETTOPINDEX);
     STRING_CASE(CB_GETHORIZONTALEXTENT);
     STRING_CASE(CB_SETHORIZONTALEXTENT);
     STRING_CASE(CB_GETDROPPEDWIDTH);
     STRING_CASE(CB_SETDROPPEDWIDTH);
     STRING_CASE(CB_INITSTORAGE);
     STRING_CASE(CB_MSGMAX);

     // Scroll bar messages
     STRING_CASE(SBM_SETPOS);
     STRING_CASE(SBM_GETPOS);
     STRING_CASE(SBM_SETRANGE);
     STRING_CASE(SBM_SETRANGEREDRAW);
     STRING_CASE(SBM_GETRANGE);
     STRING_CASE(SBM_ENABLE_ARROWS);
     STRING_CASE(SBM_SETSCROLLINFO);
     STRING_CASE(SBM_GETSCROLLINFO);

     // List view messages
     STRING_CASE(LVM_FIRST);
     //STRING_CASE(LVM_GETBKCOLOR);
     STRING_CASE(LVM_SETBKCOLOR);
     STRING_CASE(LVM_GETIMAGELIST);
     STRING_CASE(LVM_SETIMAGELIST);
     STRING_CASE(LVM_GETITEMCOUNT);
     STRING_CASE(LVM_GETITEM);
     STRING_CASE(LVM_SETITEM);
     STRING_CASE(LVM_INSERTITEM);
     STRING_CASE(LVM_DELETEITEM);
     STRING_CASE(LVM_DELETEALLITEMS);
     STRING_CASE(LVM_GETCALLBACKMASK);
     STRING_CASE(LVM_SETCALLBACKMASK);
     STRING_CASE(LVM_GETNEXTITEM);
     STRING_CASE(LVM_FINDITEM);
     STRING_CASE(LVM_GETITEMRECT);
     STRING_CASE(LVM_SETITEMPOSITION);
     STRING_CASE(LVM_GETITEMPOSITION);
     STRING_CASE(LVM_GETSTRINGWIDTH);
     STRING_CASE(LVM_HITTEST);
     STRING_CASE(LVM_ENSUREVISIBLE);
     STRING_CASE(LVM_SCROLL);
     STRING_CASE(LVM_REDRAWITEMS);
     STRING_CASE(LVM_ARRANGE);
     STRING_CASE(LVM_EDITLABEL);
     STRING_CASE(LVM_GETEDITCONTROL);
     STRING_CASE(LVM_GETCOLUMN);
     STRING_CASE(LVM_SETCOLUMN);
     STRING_CASE(LVM_INSERTCOLUMN);
     STRING_CASE(LVM_DELETECOLUMN);
     STRING_CASE(LVM_GETCOLUMNWIDTH);
     STRING_CASE(LVM_SETCOLUMNWIDTH);
     STRING_CASE(LVM_GETHEADER);
     STRING_CASE(LVM_CREATEDRAGIMAGE);
     STRING_CASE(LVM_GETVIEWRECT);
     STRING_CASE(LVM_GETTEXTCOLOR);
     STRING_CASE(LVM_SETTEXTCOLOR);
     STRING_CASE(LVM_GETTEXTBKCOLOR);
     STRING_CASE(LVM_SETTEXTBKCOLOR);
     STRING_CASE(LVM_GETTOPINDEX);
     STRING_CASE(LVM_GETCOUNTPERPAGE);
     STRING_CASE(LVM_GETORIGIN);
     STRING_CASE(LVM_UPDATE);
     STRING_CASE(LVM_SETITEMSTATE);
     STRING_CASE(LVM_GETITEMSTATE);
     STRING_CASE(LVM_GETITEMTEXT);
     STRING_CASE(LVM_SETITEMTEXT);
     STRING_CASE(LVM_SETITEMCOUNT);
     STRING_CASE(LVM_SORTITEMS);
     STRING_CASE(LVM_SETITEMPOSITION32);
     STRING_CASE(LVM_GETSELECTEDCOUNT);
     STRING_CASE(LVM_GETITEMSPACING);
     STRING_CASE(LVM_GETISEARCHSTRING);
     STRING_CASE(LVM_SETICONSPACING);
     STRING_CASE(LVM_SETEXTENDEDLISTVIEWSTYLE);
     STRING_CASE(LVM_GETEXTENDEDLISTVIEWSTYLE);
     STRING_CASE(LVM_GETSUBITEMRECT);
     STRING_CASE(LVM_SUBITEMHITTEST);
     STRING_CASE(LVM_SETCOLUMNORDERARRAY);
     STRING_CASE(LVM_GETCOLUMNORDERARRAY);
     STRING_CASE(LVM_SETHOTITEM);
     STRING_CASE(LVM_GETHOTITEM);
     STRING_CASE(LVM_SETHOTCURSOR);
     STRING_CASE(LVM_GETHOTCURSOR);
     STRING_CASE(LVM_APPROXIMATEVIEWRECT);
     //STRING_CASE(LVM_SETWORKAREA);

     // Header list control messages
     STRING_CASE(HDM_CREATEDRAGIMAGE);
     STRING_CASE(HDM_DELETEITEM);
     STRING_CASE(HDM_SETIMAGELIST);
     STRING_CASE(HDM_GETITEM);
     STRING_CASE(HDM_GETITEMCOUNT);
     STRING_CASE(HDM_GETITEMRECT);
     STRING_CASE(HDM_GETORDERARRAY);
     //STRING_CASE(HDM_GETUNICODEFORMAT);
     STRING_CASE(HDM_HITTEST);
     STRING_CASE(HDM_INSERTITEM);
     STRING_CASE(HDM_LAYOUT);
     STRING_CASE(HDM_ORDERTOINDEX);
     STRING_CASE(HDM_SETHOTDIVIDER);
     //STRING_CASE(HDM_SETIMAGELIST);
     STRING_CASE(HDM_SETITEM);
     STRING_CASE(HDM_SETORDERARRAY);
     //STRING_CASE(HDM_SETUNICODEFORMAT);
     STRING_CASE(HDM_GETITEMW);

     // Tab control messages
     STRING_CASE(TCM_GETITEMA);
     STRING_CASE(TCM_GETITEMW);
     STRING_CASE(TCM_SETITEMA);
     STRING_CASE(TCM_SETITEMW);
     STRING_CASE(TCM_INSERTITEMA);
     STRING_CASE(TCM_INSERTITEMW);
     STRING_CASE(TCM_DELETEITEM);
     STRING_CASE(TCM_DELETEALLITEMS);
     STRING_CASE(TCM_GETITEMRECT);
     STRING_CASE(TCM_GETCURSEL);
     STRING_CASE(TCM_SETCURSEL);
     STRING_CASE(TCM_HITTEST);
     STRING_CASE(TCM_SETITEMEXTRA);
     STRING_CASE(TCM_ADJUSTRECT);
     STRING_CASE(TCM_SETITEMSIZE);
     STRING_CASE(TCM_REMOVEIMAGE);
     STRING_CASE(TCM_SETPADDING);
     STRING_CASE(TCM_GETROWCOUNT);
     STRING_CASE(TCM_GETTOOLTIPS);
     STRING_CASE(TCM_SETTOOLTIPS);
     STRING_CASE(TCM_GETCURFOCUS);
     STRING_CASE(TCM_SETCURFOCUS);
     STRING_CASE(TCM_SETMINTABWIDTH);
     STRING_CASE(TCM_DESELECTALL);
     STRING_CASE(TCM_HIGHLIGHTITEM);
     STRING_CASE(TCM_SETEXTENDEDSTYLE);
     STRING_CASE(TCM_GETEXTENDEDSTYLE);
     STRING_CASE(TCM_SETUNICODEFORMAT);
     STRING_CASE(TCM_GETUNICODEFORMAT);

     // Other's
     STRING_CASE(WM_MOUSEHOVER);
     STRING_CASE(WM_MOUSELEAVE);

     default :
               wsprintf(_szHRESULT_GetMessageString, TEXT("%#lx"), dwMessage);
               pcsz = _szHRESULT_GetMessageString;
               break;
    }

  return pcsz;
 }

// --------------------------------------------------------------------

LPCTSTR GetScrollCodeString(int nScrollCode)
 {
	LPCTSTR pcsz;
	static TCHAR _szHRESULT_GetScrollCodeString[] = "0x12345678";

	switch (nScrollCode)
		{
     STRING_CASE(SB_ENDSCROLL);
     STRING_CASE(SB_LEFT);
     STRING_CASE(SB_RIGHT);
     STRING_CASE(SB_LINELEFT);
     STRING_CASE(SB_LINERIGHT);
     STRING_CASE(SB_PAGELEFT);
     STRING_CASE(SB_PAGERIGHT);
     STRING_CASE(SB_THUMBPOSITION);
     STRING_CASE(SB_THUMBTRACK);

     default :
               wsprintf(_szHRESULT_GetScrollCodeString, TEXT("%#lx"), nScrollCode);
               pcsz = _szHRESULT_GetScrollCodeString;
               break;
    }

  return pcsz;
 }

// --------------------------------------------------------------------

LPCTSTR GetSizeType(WPARAM fwSizeType)
 {
	LPCTSTR pcsz;
	static TCHAR _szHRESULT_GetSizeType[] = "0x12345678";

	switch (fwSizeType)
		{
     STRING_CASE(SIZE_MAXHIDE);
     STRING_CASE(SIZE_MAXIMIZED);
     STRING_CASE(SIZE_MAXSHOW);
     STRING_CASE(SIZE_MINIMIZED);
     STRING_CASE(SIZE_RESTORED);

     default :
               wsprintf(_szHRESULT_GetSizeType, TEXT("%#lx"), fwSizeType);
               pcsz = _szHRESULT_GetSizeType;
               break;
    }

  return pcsz;
 }

// --------------------------------------------------------------------
#ifndef _AFXDLL

void TRACE(char *szText, ...)
 {
  va_list Args;
  char    Buffer[2048];

  va_start(Args,szText);
  vsprintf(Buffer,szText,Args);
  va_end(Args);     
  
  Buffer[sizeof(Buffer) - 1] = 0;            

  if (strlen(Buffer) >= 500) return;

  OutputDebugString(Buffer);
 }

#endif
// ====================================================================
// ====================================================================
